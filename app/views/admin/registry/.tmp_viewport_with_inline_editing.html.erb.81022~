<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <title>Registry Explorer</title>
    
    <script type="text/javascript" src="/javascripts/ext-base.js"></script>
    <script type="text/javascript" src="/javascripts/ext-all.js"></script>
    <link rel="stylesheet" type="text/css" href="/resources/css/ext-all.css" />
</head>

<body>
    <script type="text/javascript">

    Ext.onReady(function(){
       Ext.QuickTips.init();
       var win;

       var gridDataStore = new Ext.data.Store({
            id: 'properties',
            restful: true,
            proxy: new Ext.data.HttpProxy({
               url: '/registry/properties?node=root',
            }),
            reader: new Ext.data.JsonReader({
                idProperty: 'id',
                root: 'properties',
                totalProperty: 'total',
                fields: [{name: 'id', mapping: 'id'},
                         {name: 'value', mapping: 'value'},
                         {name: 'description', mapping: 'description'},
                         {name: 'full_key', mapping: 'full_key'},
                         {name: 'key', mapping: 'key'}]
            }),
            writer: new Ext.data.JsonWriter({encode: false})
        });
        
        var form = Ext.form;
        
        var columnModel = new Ext.grid.ColumnModel([{
             header: 'Key',
             dataIndex: 'key',
             sortable: true,
          },{
             header: 'Value',
             dataIndex: 'value',
             sortable: true,
             editor: new form.TextField({
                 allowBlank: false
             })
        }]);
        
        var gridToolbar = new Ext.Toolbar({
            items:[{
              text: '+ Add',
              handler: function(btn, ev) {
                  grid.stopEditing();
                  addProperty();
             }
            }, '-', {
              id: 'delete_property_button',
              disabled: true,
              text: '- Delete',
              handler: function() {
                 var item = grid.getSelectionModel().getSelected();
                 if (!item) {
                    return false;
                 }
                 grid.store.remove(item);
                 gridToolbar.items.get("view_property_details_button").disable();
                 gridToolbar.items.get("delete_property_button").disable();
              }
            }, '-', {
              id: 'view_property_details_button',
              text: 'View Details',
              disabled: true,
              handler: function(){
                editProperty();
              }
            }]
        });
        
        
        /* BEGIN GRID IMPLEMENTATION */
        var grid = new Ext.grid.EditorGridPanel({
            store: gridDataStore,
            cm: columnModel,
            sm: new Ext.grid.RowSelectionModel({singleSelect: true}),
            autoExpandColumn: true,
            clicksToEdit: 2,
            title: 'Properties (<span style="color:green"><%=Rails.env%></span>)',
            collapsible: false,
            tbar: gridToolbar,
            region: 'center',
            margins: '2 2 2 0',
            viewConfig: {
              forceFit: true
            },
            listeners: {
              rowclick: function(grid, rowIndex, e) {
                gridToolbar.items.get("view_property_details_button").enable();
                gridToolbar.items.get("delete_property_button").enable();
              }, 
              celldblclick: function(grid, rowIndex, columnIndex, e) {
                if (columnIndex == 0) {
                  editProperty();
                }
                return true;
              } 
            }
        });
        
        gridDataStore.load();
        /* END GRID IMPLEMENTATION */
        
        
        /* BEGIN TREE IMPLEMENTATION */
        var lastEditedNode = null;
        
        // Tree toolbar
        var treeToolbar = new Ext.Toolbar({
            items:[{
                text: '+ Add',
                handler: addFolder
            }, '-', {
                text: 'Edit',
                handler: editFolder
            }, '-', {
                text: '- Delete',
                handler: function(){
                    lastEditedNode = tree.getSelectionModel().getSelectedNode();
                    if (!lastEditedNode)
                      return false;
                      
                    var conn = new Ext.data.Connection();
                    conn.request({
                        url: '/registry/delete_folder',
                        method: 'POST',
                        params: { "node": lastEditedNode.attributes.id},
                        success: function(responseObject) {
                            lastEditedNode.destroy();
                            lastEditedNode = null;
                        },
                        failure: function() {
                            Ext.Msg.alert('Status', 'Cannot delete this folder');
                        }
                    });
                }
            }, '->', {
                text: 'Reload',
                handler: function(){
                  location.reload();
                }
            }]
        });
        
        var tree = new Ext.tree.TreePanel({
             animate:true,
             enableDD:false,
             containerScroll: true,
             rootVisible:true,
             dataUrl: '/registry/folders',
             root: {
                nodeType: 'async',
                text: 'Root',
                draggable: false,
                id: 'root'
             },

             // layout
             region:'west',
             width:300,
             minSize: 100,
             maxSize: 550,
             split:true,
             
             // panel
             title:'Registry Tree (<span style="color:green"><%=Rails.env%></span>)',
             autoScroll:true,
             tbar: treeToolbar,
             margins: '2 0 2 2',
             
             listeners: {
              click: function(n) {
                  // Ext.Msg.alert(n.attributes.id);
                  gridDataStore.proxy.setUrl('/registry/properties?node=' + n.attributes.id, true);
                  gridDataStore.reload();
                  gridToolbar.items.get("view_property_details_button").disable();
                  gridToolbar.items.get("delete_property_button").disable();
              },
              dblclick: function(n) {
                  editFolder();
              }
            }
        });
        
        // add an inline editor for the nodes
/*        var treeEditor = new Ext.tree.TreeEditor(tree, { }, {
            allowBlank: false,
            blankText: 'A name is required',
            selectOnFocus: true,
            listeners: {
              beforestartedit: function(editor, boundEl, value) {
                if (tree.getRootNode() == editor.editNode)
                    return false;
                    
                return true;                
              }, 
              beforecomplete: function(editor, value, startValue) {
                lastEditedNode = editor.editNode;
                var conn = new Ext.data.Connection();
                conn.request({
                    url: '/registry/edit_folder',
                    method: 'POST',
                    params: { "node": lastEditedNode.attributes.id, 
                              "name": value,
                              "parent_id": lastEditedNode.parentNode.attributes.id},
                    success: function(responseObject) {
                          // Ext.Msg.alert('Status', responseObject.responseText); 
                          var json = eval(responseObject.responseText)
                          lastEditedNode.attributes.id = json[0].id;
                          gridDataStore.proxy.setUrl('/registry/properties?node=' + lastEditedNode.attributes.id, true);
                          gridDataStore.reload();
                    },
                    failure: function() {
                        Ext.Msg.alert('Status', 'Cannot insert a node');
                        lastEditedNode.destroy();
                    }
                });
                
                return true;
              }
            }
        });
*/
        
        tree.getRootNode().expand();
        /* END TREE IMPLEMENTATION */
       
        var viewport = new Ext.Viewport({
            layout: 'border',
            defaults: {
              collapsible: false,
              split: true,
              bodyStyle: 'padding:0px'
            },
            items: [tree, 
              new Ext.Panel({
                layout: 'border',
                region: 'center',
                bodyBorder: false,
                border: false,
                defaults: {
                  collapsible: false,
                  split: false,
                  bodyStyle: 'padding:0px; font-size:8px;'
                },
                items: [grid, {
                  id: 'infoPanel',
                  region: 'south',
                  height: 30,
                  split: false,
                  margins: '2 2 2 0',
                  bodyStyle: 'padding:3px'
                }]
              })]
        });
        
        /* Begin Bottom Panel Management */
       
        var infoTplMarkup = ['<span style="font-size:12px">Full Key: <b>{full_key}</b> | Description: <b>{description}</b> </style>'];
        var infoTpl = new Ext.Template(infoTplMarkup);
       
        grid.getSelectionModel().on('rowselect', function(sm, rowIdx, r) {
            var infoPanel = Ext.getCmp('infoPanel');
            infoTpl.overwrite(infoPanel.body, r.data);
        });

        /* End Bottom Panel Management */
          
          
        /* Begin Tree Form */
        Ext.form.Field.prototype.msgTarget = 'side';
    
        var folderFormPanel = new Ext.FormPanel({
            frame: true,
            title:'',
            labelAlign: 'right',
            labelWidth: 80,
            width: 340,
            waitMsgTarget: true,
            id: 'folders',
            reader: new Ext.data.JsonReader({
                root: 'folders',
                totalProperty: 'total',
                fields: [
                         {name: 'folder[key]', mapping: 'key'},
                         {name: 'folder[value]', mapping: 'value'}
                        ]
            }),
            
            items: [
                new Ext.form.FieldSet({
                    title: 'Basic',
                    autoHeight: true,
                    defaultType: 'textfield',
                    items: [{
                                fieldLabel: 'Key',
                                name: 'folder[key]',
                                width:240,
                                allowBlank: false
                            }, {
                                fieldLabel: 'Label',
                                name: 'folder[value]',
                                width:240,
                            }
                    ]
                }) 
            ]
        });
        
        var folderWindow = new Ext.Window({
            layout:'fit',
            title: 'Folder Details',
            width: 400,
            height: 200,
            modal:true,
            closeAction:'hide', 
            plain: true,

            items:[folderFormPanel],
      
            buttons: [{
                text: 'Cancel',
                handler: function(){
                  if (tempFolder) {
                    var parent = tempFolder.parentNode;
                    parent.removeChild(tempFolder, false);
                    tempFolder.destroy();
                    tempFolder = null;
                    parent.select();
                  }
                  folderWindow.hide();
                }
            },{
                text:'Submit',
                disabled:false,
                handler: function(){
                  saveFolder();
                }
            }]
        });    

        var lastEditedFolder = null;
        var tempFolder = null;
        function addFolder(){
          lastEditedFolder = null;
          
           var parent = tree.getSelectionModel().getSelectedNode();
           if (!parent)
              parent = tree.getRootNode();

           if (!parent.expanded) {
             parent.expand();
           } 

           setTimeout(function(){
             lastEditedFolder = parent.appendChild(new Ext.tree.AsyncTreeNode({text:'New Folder', id:''}));
             tree.getSelectionModel().select(lastEditedFolder);
           }, 100);

          tempFolder = lastEditedFolder; 

          folderWindow.show(this);
          folderFormPanel.getForm().load({
              url:'/registry/folder', 
              method:'GET', 
              waitMsg:'Loading...'
          });
        }

        function editFolder() {
          lastEditedFolder = tree.getSelectionModel().getSelectedNode();
          
          folderWindow.show(this);
          folderFormPanel.getForm().load({
              url:'/registry/folder', 
              params: {folder_id: lastEditedFolder.attributes.id}, 
              method:'GET', 
              waitMsg:'Loading...'
          });
        }
        
        function saveFolder() {
          var parent = lastEditedFolder.parentNode;
          
          folderFormPanel.getForm().submit({
                url:'/registry/folder',
                params: {folder_id: lastEditedFolder.attributes.id, parent_id: parent.attributes.id}, 
                method:'POST', 
                waitMsg:'Saving folder info...'
          });
        }
        
/*        
        folderFormPanel.on({
            actioncomplete: function(form, action){
                if(action.type == 'submit'){
                   lastEditedFolder = null;
                   folderWindow.hide(); 
                   // gridToolbar.items.get("view_property_details_button").disable();
                   // gridToolbar.items.get("delete_property_button").disable();
                   gridDataStore.reload();                   
                }
            }
        });
*/
        var propertyFormPanel = new Ext.FormPanel({
            frame: true,
            title:'',
            labelAlign: 'right',
            labelWidth: 80,
            width: 340,
            waitMsgTarget: true,
            id: 'properties',
            reader: new Ext.data.JsonReader({
                idProperty: 'id',
                root: 'properties',
                totalProperty: 'total',
                fields: [{name: 'property[id]', mapping: 'id'},
                         {name: 'property[key]', mapping: 'key'},
                         {name: 'property[value]', mapping: 'value'},
                         {name: 'property[description]', mapping: 'description'},
                         {name: 'property[default_qa]', mapping: 'default_qa'},
                         {name: 'property[default_stage]', mapping: 'default_stage'},
                         {name: 'property[default_production]', mapping: 'default_production'},
                         {name: 'property[default_development]', mapping: 'default_development'}
                        ]
            }),
            
            items: [
                new Ext.form.FieldSet({
                    title: 'Basic',
                    autoHeight: true,
                    defaultType: 'textfield',
                    id: 'property',
                    items: [{
                                fieldLabel: 'Key',
                                name: 'property[key]',
                                width:240,
                                allowBlank: false
                            }, {
                                fieldLabel: 'Value',
                                name: 'property[value]',
                                width:240,
                                allowBlank: false
                            }, {
                                fieldLabel: 'Description',
                                name: 'property[description]',
                                width:240
                            }
                    ]
                }), 
                new Ext.form.FieldSet({
                    title: 'Default Values',
                    autoHeight: true,
                    defaultType: 'textfield',
                    items: [{
                                fieldLabel: 'QA',
                                name: 'property[default_qa]',
                                width:240
                            }, {
                                fieldLabel: 'Stage',
                                name: 'property[default_stage]',
                                width:240
                            }, {
                                fieldLabel: 'Production',
                                name: 'property[default_production]',
                                width:240
                            }, {
                                fieldLabel: 'Development',
                                name: 'property[default_development]',
                                width:240
                            }
                    ]
                })
            ]
        });

        var propertyWindow = new Ext.Window({
            layout:'fit',
            title: 'Property Details',
            width: 400,
            height: 350,
            modal:true,
            closeAction:'hide',
            plain: true,

            items:[propertyFormPanel],
      
            buttons: [{
                text: 'Cancel',
                handler: function(){
                  propertyWindow.hide();
                }
            },{
                text:'Submit',
                disabled:false,
                handler: function(){
                  saveProperty();
                }
            }]
        });

        var lastEditedProperty = null;
        
        function addProperty(){
          lastEditedProperty = null;
          propertyWindow.show(this);
          propertyFormPanel.getForm().load({
              url:'/registry/property', 
              method:'GET', 
              waitMsg:'Loading...'
          });
        }

        function editProperty() {
          lastEditedProperty = grid.getSelectionModel().getSelected();
          
          propertyWindow.show(this);
          propertyFormPanel.getForm().load({
              url:'/registry/property', 
              params: {prop_id: lastEditedProperty.id}, 
              method:'GET', 
              waitMsg:'Loading...'
          });
        }
        
        function saveProperty() {
          var node = tree.getSelectionModel().getSelectedNode();
          var prop_id = ((lastEditedProperty!=null) ? lastEditedProperty.id : "");

          propertyFormPanel.getForm().submit({
                url:'/registry/property',
                params: {prop_id: prop_id, parent_id: node.attributes.id}, 
                method:'POST', 
                waitMsg:'Saving property info...'
          });
                
        }
        
        propertyFormPanel.on({
            actioncomplete: function(form, action){
                if(action.type == 'submit'){
                   lastEditedProperty = null;
                   propertyWindow.hide(); 
                   // gridToolbar.items.get("view_property_details_button").disable();
                   // gridToolbar.items.get("delete_property_button").disable();
                   gridDataStore.reload();                   
                }
            }
        });

    });
    </script>
    
</body>
</html>
